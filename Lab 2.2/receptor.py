# -*- coding: utf-8 -*-
"""Receptor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X8liJMvD59Gjz95-9QjSCpwwJI_7UrQf
"""

import socket
import subprocess
import random
import time
import matplotlib.pyplot as plt

HOST = "127.0.0.1"
PORT = 65432

def generar_mensaje(longitud):
    return ''.join(random.choice("ABCDEFGHIJKLMNOPQRSTUVWXYZ") for _ in range(longitud))

def procesar_trama(trama):
    n = len(trama)
    r = 0
    while 2 ** r < n + 1:
        r += 1

    ep = 0
    for i in range(r):
        m = 1 << i
        p = 0
        for j in range(n):
            if (j + 1) & m:
                p ^= int(trama[j])
        if p:
            ep += m

    if ep > n:
        return "Error no corregible"
    elif ep > 0:
        return "Error corregido"
    else:
        return "Correcto"

def receptor_una_vez():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind((HOST, PORT))
        s.listen()
        conn, _ = s.accept()
        with conn:
            trama = conn.recv(4096).decode()
            return procesar_trama(trama)

def pruebas_automatizadas(num=1000, longitud=15, prob_error=0.01):
    resultados = {"Correcto": 0, "Error corregido": 0, "Error no corregible": 0}

    for i in range(num):
        msg = generar_mensaje(longitud)
        receptor_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        receptor_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        receptor_socket.bind((HOST, PORT))
        receptor_socket.listen(1)

        proc = subprocess.Popen(["java", "Emisor", msg, str(prob_error)])
        conn, _ = receptor_socket.accept()
        with conn:
            trama = conn.recv(4096).decode()
            resultado = procesar_trama(trama)
            resultados[resultado] += 1

        receptor_socket.close()
        proc.wait()

        if (i+1) % 100 == 0:
            print(f"→ {i+1} pruebas completadas")

    return resultados

# Ejecutar simulación y graficar
if __name__ == "__main__":
    resultados = pruebas_automatizadas(num=1000, longitud=5, prob_error=0.05)
    print("Resultados:", resultados)

    # Gráfica
    plt.bar(resultados.keys(), resultados.values(), color=['green', 'blue', 'red'])
    plt.title("Resultados")
    plt.ylabel("Cantidad de mensajes")
    plt.xlabel("Resultado")
    plt.show()